from collections import defaultdict, deque
import math

def dijkstra_with_buckets(graph, start, max_weight):
    distances = defaultdict(lambda: math.inf)
    distances[start] = 0
    buckets = [deque() for _ in range(max_weight * len(graph) + 1)]
    buckets[0].append(start)
    current_bucket = 0

    while current_bucket < len(buckets):
        if not buckets[current_bucket]:
            current_bucket += 1
            continue

        node = buckets[current_bucket].popleft()

        for neighbor, weight in graph[node]:
            new_distance = distances[node] + weight
            if new_distance < distances[neighbor]:
                distances[neighbor] = new_distance
                buckets[new_distance].append(neighbor)

    return dict(distances)

graph = {
    0: [(1, 4), (2, 1)],
    1: [(3, 1)],
    2: [(1, 2), (3, 5)],
    3: []
}

start_node = 0
max_edge_weight = 5

shortest_distances = dijkstra_with_buckets(graph, start_node, max_edge_weight)
print(shortest_distances)

